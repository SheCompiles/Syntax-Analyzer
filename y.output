State 67 conflicts: 1 shift/reduce


Grammar

    0 $accept: PARSER $end

    1 PARSER: START

    2 START: EXPR1
    3      | START EXPR1

    4 EXPR1: VAR_DECL
    5      | FUNCTION_DECL
    6      | CLASS_DECL
    7      | INTERFACE_DECL

    8 VAR_DECL: VAR _semicolon

    9 VAR_DECLS: VAR_DECLS VAR_DECL
   10          | /* empty */

   11 VAR: TYPE _id

   12 TYPE: _int
   13     | _double
   14     | _boolean
   15     | _string
   16     | TYPE _leftbracket _rightbracket
   17     | _id

   18 FUNCTION_DECL: TYPE _id _leftparen FORMALS _rightparen STMT_BLOCK
   19              | _void _id _leftparen FORMALS _rightparen STMT_BLOCK

   20 VAR_PLUS: VAR
   21         | VAR_PLUS _comma VAR

   22 FORMALS: VAR_PLUS
   23        | /* empty */

   24 EXTEND: _extends _id
   25       | /* empty */

   26 ID_PLUS: _id
   27        | ID_PLUS _comma _id

   28 IMPLEMENT: _implements ID_PLUS
   29          | /* empty */

   30 CLASS_DECL: _class _id EXTEND IMPLEMENT _leftbrace FIELD_PLUS _rightbrace

   31 FIELD: VAR_DECL
   32      | FUNCTION_DECL

   33 FIELD_PLUS: FIELD_PLUS FIELD
   34           | /* empty */

   35 INTERFACE_DECL: _interface _id _leftbrace PROTOTYPE_PLUS _rightbrace

   36 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon
   37          | _void _id _leftparen FORMALS _rightparen _semicolon

   38 PROTOTYPE_PLUS: PROTOTYPE_PLUS PROTOTYPE
   39               | /* empty */

   40 EXPR_ONE: EXPR
   41         | /* empty */

   42 STMT: EXPR_ONE _semicolon
   43     | IF_STMT
   44     | WHILE_STMT
   45     | FOR_STMT
   46     | BREAK_STMT
   47     | RETURN_STMT
   48     | PRINT_STMT
   49     | STMT_BLOCK

   50 STMTS: STMTS STMT
   51      | /* empty */

   52 IF_STMT: _if _leftparen EXPR _rightparen STMT IF_ONLY
   53        | _if _leftparen EXPR _rightparen STMT _else STMT

   54 WHILE_STMT: _while _leftparen EXPR _rightparen STMT

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon EXPR _semicolon EXPR_ONE _rightparen STMT

   56 BREAK_STMT: _break _semicolon

   57 RETURN_STMT: _return EXPR_ONE _semicolon

   58 PRINT_STMT: _println _leftparen EXPRS _rightparen _semicolon

   59 STMT_BLOCK: _leftbrace VAR_DECLS STMTS _rightbrace

   60 EXPR: LVALUE _assignop EXPR
   61     | CONSTANT
   62     | LVALUE
   63     | CALL
   64     | _leftparen EXPR _rightparen
   65     | EXPR _plus EXPR
   66     | EXPR _minus EXPR
   67     | EXPR _multiplication EXPR
   68     | EXPR _division EXPR
   69     | EXPR _mod EXPR
   70     | _minus EXPR _multiplication
   71     | EXPR _less EXPR
   72     | EXPR _lessequal EXPR
   73     | EXPR _greater EXPR
   74     | EXPR _greaterequal EXPR
   75     | EXPR _equal EXPR
   76     | EXPR _notequal EXPR
   77     | EXPR _and EXPR
   78     | EXPR _or EXPR
   79     | _not EXPR
   80     | _readln "()"
   81     | _new _leftparen _id _rightparen
   82     | _newarray _leftparen _intconstant _comma TYPE _rightparen

   83 EXPRS: EXPR
   84      | EXPRS _comma EXPR

   85 LVALUE: _id
   86       | LVALUE LVALUE_EXPR

   87 LVALUE_EXPR: _leftbracket EXPR _rightbracket
   88            | LVALUE_EXPR PRODPERIODID

   89 CALL: _id _leftparen ACTUALS _rightparen
   90     | _id PRODPERIODID _leftparen ACTUALS _rightparen

   91 PRODPERIODID: _period _id

   92 ACTUALS: EXPRS
   93        | /* empty */

   94 CONSTANT: _intconstant
   95         | _doubleconstant
   96         | _stringconstant
   97         | _booleanconstant


Terminals, with rules where they appear

$end (0) 0
error (256)
_leftparen (258) 18 19 36 37 52 53 54 55 58 64 81 82 89 90
_rightparen (259) 18 19 36 37 52 53 54 55 58 64 81 82 89 90
_leftbrace (260) 30 35 59
_rightbrace (261) 30 35 59
_leftbracket (262) 16 87
_rightbracket (263) 16 87
_semicolon (264) 8 36 37 42 55 56 57 58
_boolean (265) 14
_double (266) 13
_int (267) 12
_string (268) 15
_class (269) 30
_implements (270) 28
_interface (271) 35
_void (272) 19 37
_id (273) 11 17 18 19 24 26 27 30 35 36 37 81 85 89 90 91
_if (274) 52 53
_else (275) 53
_break (276) 56
_extends (277) 24
_for (278) 55
_new (279) 81
_newarray (280) 82
_println (281) 58
_readln (282) 80
_return (283) 57
_while (284) 54
_comma (285) 21 27 82 84
_period (286) 91
_intconstant (287) 82 94
_doubleconstant (288) 95
_stringconstant (289) 96
_booleanconstant (290) 97
_mod (291) 69
_division (292) 68
_multiplication (293) 67 70
_minus (294) 66 70
_plus (295) 65
_greaterequal (296) 74
_greater (297) 73
_lessequal (298) 72
_less (299) 71
_notequal (300) 76
_equal (301) 75
_and (302) 77
_or (303) 78
_assignop (304) 60
_not (305) 79
IF_ONLY (306) 52
"()" (307) 80


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
PARSER (54)
    on left: 1, on right: 0
START (55)
    on left: 2 3, on right: 1 3
EXPR1 (56)
    on left: 4 5 6 7, on right: 2 3
VAR_DECL (57)
    on left: 8, on right: 4 9 31
VAR_DECLS (58)
    on left: 9 10, on right: 9 59
VAR (59)
    on left: 11, on right: 8 20 21
TYPE (60)
    on left: 12 13 14 15 16 17, on right: 11 16 18 36 82
FUNCTION_DECL (61)
    on left: 18 19, on right: 5 32
VAR_PLUS (62)
    on left: 20 21, on right: 21 22
FORMALS (63)
    on left: 22 23, on right: 18 19 36 37
EXTEND (64)
    on left: 24 25, on right: 30
ID_PLUS (65)
    on left: 26 27, on right: 27 28
IMPLEMENT (66)
    on left: 28 29, on right: 30
CLASS_DECL (67)
    on left: 30, on right: 6
FIELD (68)
    on left: 31 32, on right: 33
FIELD_PLUS (69)
    on left: 33 34, on right: 30 33
INTERFACE_DECL (70)
    on left: 35, on right: 7
PROTOTYPE (71)
    on left: 36 37, on right: 38
PROTOTYPE_PLUS (72)
    on left: 38 39, on right: 35 38
EXPR_ONE (73)
    on left: 40 41, on right: 42 55 57
STMT (74)
    on left: 42 43 44 45 46 47 48 49, on right: 50 52 53 54 55
STMTS (75)
    on left: 50 51, on right: 50 59
IF_STMT (76)
    on left: 52 53, on right: 43
WHILE_STMT (77)
    on left: 54, on right: 44
FOR_STMT (78)
    on left: 55, on right: 45
BREAK_STMT (79)
    on left: 56, on right: 46
RETURN_STMT (80)
    on left: 57, on right: 47
PRINT_STMT (81)
    on left: 58, on right: 48
STMT_BLOCK (82)
    on left: 59, on right: 18 19 49
EXPR (83)
    on left: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77
    78 79 80 81 82, on right: 40 52 53 54 55 60 64 65 66 67 68 69 70
    71 72 73 74 75 76 77 78 79 83 84 87
EXPRS (84)
    on left: 83 84, on right: 58 84 92
LVALUE (85)
    on left: 85 86, on right: 60 62 86
LVALUE_EXPR (86)
    on left: 87 88, on right: 86 88
CALL (87)
    on left: 89 90, on right: 63
PRODPERIODID (88)
    on left: 91, on right: 88 90
ACTUALS (89)
    on left: 92 93, on right: 89 90
CONSTANT (90)
    on left: 94 95 96 97, on right: 61


state 0

    0 $accept: . PARSER $end

    _boolean    shift, and go to state 1
    _double     shift, and go to state 2
    _int        shift, and go to state 3
    _string     shift, and go to state 4
    _class      shift, and go to state 5
    _interface  shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    PARSER          go to state 9
    START           go to state 10
    EXPR1           go to state 11
    VAR_DECL        go to state 12
    VAR             go to state 13
    TYPE            go to state 14
    FUNCTION_DECL   go to state 15
    CLASS_DECL      go to state 16
    INTERFACE_DECL  go to state 17


state 1

   14 TYPE: _boolean .

    $default  reduce using rule 14 (TYPE)


state 2

   13 TYPE: _double .

    $default  reduce using rule 13 (TYPE)


state 3

   12 TYPE: _int .

    $default  reduce using rule 12 (TYPE)


state 4

   15 TYPE: _string .

    $default  reduce using rule 15 (TYPE)


state 5

   30 CLASS_DECL: _class . _id EXTEND IMPLEMENT _leftbrace FIELD_PLUS _rightbrace

    _id  shift, and go to state 18


state 6

   35 INTERFACE_DECL: _interface . _id _leftbrace PROTOTYPE_PLUS _rightbrace

    _id  shift, and go to state 19


state 7

   19 FUNCTION_DECL: _void . _id _leftparen FORMALS _rightparen STMT_BLOCK

    _id  shift, and go to state 20


state 8

   17 TYPE: _id .

    $default  reduce using rule 17 (TYPE)


state 9

    0 $accept: PARSER . $end

    $end  shift, and go to state 21


state 10

    1 PARSER: START .
    3 START: START . EXPR1

    _boolean    shift, and go to state 1
    _double     shift, and go to state 2
    _int        shift, and go to state 3
    _string     shift, and go to state 4
    _class      shift, and go to state 5
    _interface  shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    $default  reduce using rule 1 (PARSER)

    EXPR1           go to state 22
    VAR_DECL        go to state 12
    VAR             go to state 13
    TYPE            go to state 14
    FUNCTION_DECL   go to state 15
    CLASS_DECL      go to state 16
    INTERFACE_DECL  go to state 17


state 11

    2 START: EXPR1 .

    $default  reduce using rule 2 (START)


state 12

    4 EXPR1: VAR_DECL .

    $default  reduce using rule 4 (EXPR1)


state 13

    8 VAR_DECL: VAR . _semicolon

    _semicolon  shift, and go to state 23


state 14

   11 VAR: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket
   18 FUNCTION_DECL: TYPE . _id _leftparen FORMALS _rightparen STMT_BLOCK

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 25


state 15

    5 EXPR1: FUNCTION_DECL .

    $default  reduce using rule 5 (EXPR1)


state 16

    6 EXPR1: CLASS_DECL .

    $default  reduce using rule 6 (EXPR1)


state 17

    7 EXPR1: INTERFACE_DECL .

    $default  reduce using rule 7 (EXPR1)


state 18

   30 CLASS_DECL: _class _id . EXTEND IMPLEMENT _leftbrace FIELD_PLUS _rightbrace

    _extends  shift, and go to state 26

    $default  reduce using rule 25 (EXTEND)

    EXTEND  go to state 27


state 19

   35 INTERFACE_DECL: _interface _id . _leftbrace PROTOTYPE_PLUS _rightbrace

    _leftbrace  shift, and go to state 28


state 20

   19 FUNCTION_DECL: _void _id . _leftparen FORMALS _rightparen STMT_BLOCK

    _leftparen  shift, and go to state 29


state 21

    0 $accept: PARSER $end .

    $default  accept


state 22

    3 START: START EXPR1 .

    $default  reduce using rule 3 (START)


state 23

    8 VAR_DECL: VAR _semicolon .

    $default  reduce using rule 8 (VAR_DECL)


state 24

   16 TYPE: TYPE _leftbracket . _rightbracket

    _rightbracket  shift, and go to state 30


state 25

   11 VAR: TYPE _id .
   18 FUNCTION_DECL: TYPE _id . _leftparen FORMALS _rightparen STMT_BLOCK

    _leftparen  shift, and go to state 31

    $default  reduce using rule 11 (VAR)


state 26

   24 EXTEND: _extends . _id

    _id  shift, and go to state 32


state 27

   30 CLASS_DECL: _class _id EXTEND . IMPLEMENT _leftbrace FIELD_PLUS _rightbrace

    _implements  shift, and go to state 33

    $default  reduce using rule 29 (IMPLEMENT)

    IMPLEMENT  go to state 34


state 28

   35 INTERFACE_DECL: _interface _id _leftbrace . PROTOTYPE_PLUS _rightbrace

    $default  reduce using rule 39 (PROTOTYPE_PLUS)

    PROTOTYPE_PLUS  go to state 35


state 29

   19 FUNCTION_DECL: _void _id _leftparen . FORMALS _rightparen STMT_BLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    $default  reduce using rule 23 (FORMALS)

    VAR       go to state 36
    TYPE      go to state 37
    VAR_PLUS  go to state 38
    FORMALS   go to state 39


state 30

   16 TYPE: TYPE _leftbracket _rightbracket .

    $default  reduce using rule 16 (TYPE)


state 31

   18 FUNCTION_DECL: TYPE _id _leftparen . FORMALS _rightparen STMT_BLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    $default  reduce using rule 23 (FORMALS)

    VAR       go to state 36
    TYPE      go to state 37
    VAR_PLUS  go to state 38
    FORMALS   go to state 40


state 32

   24 EXTEND: _extends _id .

    $default  reduce using rule 24 (EXTEND)


state 33

   28 IMPLEMENT: _implements . ID_PLUS

    _id  shift, and go to state 41

    ID_PLUS  go to state 42


state 34

   30 CLASS_DECL: _class _id EXTEND IMPLEMENT . _leftbrace FIELD_PLUS _rightbrace

    _leftbrace  shift, and go to state 43


state 35

   35 INTERFACE_DECL: _interface _id _leftbrace PROTOTYPE_PLUS . _rightbrace
   38 PROTOTYPE_PLUS: PROTOTYPE_PLUS . PROTOTYPE

    _rightbrace  shift, and go to state 44
    _boolean     shift, and go to state 1
    _double      shift, and go to state 2
    _int         shift, and go to state 3
    _string      shift, and go to state 4
    _void        shift, and go to state 45
    _id          shift, and go to state 8

    TYPE       go to state 46
    PROTOTYPE  go to state 47


state 36

   20 VAR_PLUS: VAR .

    $default  reduce using rule 20 (VAR_PLUS)


state 37

   11 VAR: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 48


state 38

   21 VAR_PLUS: VAR_PLUS . _comma VAR
   22 FORMALS: VAR_PLUS .

    _comma  shift, and go to state 49

    $default  reduce using rule 22 (FORMALS)


state 39

   19 FUNCTION_DECL: _void _id _leftparen FORMALS . _rightparen STMT_BLOCK

    _rightparen  shift, and go to state 50


state 40

   18 FUNCTION_DECL: TYPE _id _leftparen FORMALS . _rightparen STMT_BLOCK

    _rightparen  shift, and go to state 51


state 41

   26 ID_PLUS: _id .

    $default  reduce using rule 26 (ID_PLUS)


state 42

   27 ID_PLUS: ID_PLUS . _comma _id
   28 IMPLEMENT: _implements ID_PLUS .

    _comma  shift, and go to state 52

    $default  reduce using rule 28 (IMPLEMENT)


state 43

   30 CLASS_DECL: _class _id EXTEND IMPLEMENT _leftbrace . FIELD_PLUS _rightbrace

    $default  reduce using rule 34 (FIELD_PLUS)

    FIELD_PLUS  go to state 53


state 44

   35 INTERFACE_DECL: _interface _id _leftbrace PROTOTYPE_PLUS _rightbrace .

    $default  reduce using rule 35 (INTERFACE_DECL)


state 45

   37 PROTOTYPE: _void . _id _leftparen FORMALS _rightparen _semicolon

    _id  shift, and go to state 54


state 46

   16 TYPE: TYPE . _leftbracket _rightbracket
   36 PROTOTYPE: TYPE . _id _leftparen FORMALS _rightparen _semicolon

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 55


state 47

   38 PROTOTYPE_PLUS: PROTOTYPE_PLUS PROTOTYPE .

    $default  reduce using rule 38 (PROTOTYPE_PLUS)


state 48

   11 VAR: TYPE _id .

    $default  reduce using rule 11 (VAR)


state 49

   21 VAR_PLUS: VAR_PLUS _comma . VAR

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    VAR   go to state 56
    TYPE  go to state 37


state 50

   19 FUNCTION_DECL: _void _id _leftparen FORMALS _rightparen . STMT_BLOCK

    _leftbrace  shift, and go to state 57

    STMT_BLOCK  go to state 58


state 51

   18 FUNCTION_DECL: TYPE _id _leftparen FORMALS _rightparen . STMT_BLOCK

    _leftbrace  shift, and go to state 57

    STMT_BLOCK  go to state 59


state 52

   27 ID_PLUS: ID_PLUS _comma . _id

    _id  shift, and go to state 60


state 53

   30 CLASS_DECL: _class _id EXTEND IMPLEMENT _leftbrace FIELD_PLUS . _rightbrace
   33 FIELD_PLUS: FIELD_PLUS . FIELD

    _rightbrace  shift, and go to state 61
    _boolean     shift, and go to state 1
    _double      shift, and go to state 2
    _int         shift, and go to state 3
    _string      shift, and go to state 4
    _void        shift, and go to state 7
    _id          shift, and go to state 8

    VAR_DECL       go to state 62
    VAR            go to state 13
    TYPE           go to state 14
    FUNCTION_DECL  go to state 63
    FIELD          go to state 64


state 54

   37 PROTOTYPE: _void _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 65


state 55

   36 PROTOTYPE: TYPE _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 66


state 56

   21 VAR_PLUS: VAR_PLUS _comma VAR .

    $default  reduce using rule 21 (VAR_PLUS)


state 57

   59 STMT_BLOCK: _leftbrace . VAR_DECLS STMTS _rightbrace

    $default  reduce using rule 10 (VAR_DECLS)

    VAR_DECLS  go to state 67


state 58

   19 FUNCTION_DECL: _void _id _leftparen FORMALS _rightparen STMT_BLOCK .

    $default  reduce using rule 19 (FUNCTION_DECL)


state 59

   18 FUNCTION_DECL: TYPE _id _leftparen FORMALS _rightparen STMT_BLOCK .

    $default  reduce using rule 18 (FUNCTION_DECL)


state 60

   27 ID_PLUS: ID_PLUS _comma _id .

    $default  reduce using rule 27 (ID_PLUS)


state 61

   30 CLASS_DECL: _class _id EXTEND IMPLEMENT _leftbrace FIELD_PLUS _rightbrace .

    $default  reduce using rule 30 (CLASS_DECL)


state 62

   31 FIELD: VAR_DECL .

    $default  reduce using rule 31 (FIELD)


state 63

   32 FIELD: FUNCTION_DECL .

    $default  reduce using rule 32 (FIELD)


state 64

   33 FIELD_PLUS: FIELD_PLUS FIELD .

    $default  reduce using rule 33 (FIELD_PLUS)


state 65

   37 PROTOTYPE: _void _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    $default  reduce using rule 23 (FORMALS)

    VAR       go to state 36
    TYPE      go to state 37
    VAR_PLUS  go to state 38
    FORMALS   go to state 68


state 66

   36 PROTOTYPE: TYPE _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    $default  reduce using rule 23 (FORMALS)

    VAR       go to state 36
    TYPE      go to state 37
    VAR_PLUS  go to state 38
    FORMALS   go to state 69


state 67

    9 VAR_DECLS: VAR_DECLS . VAR_DECL
   59 STMT_BLOCK: _leftbrace VAR_DECLS . STMTS _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    _id       [reduce using rule 51 (STMTS)]
    $default  reduce using rule 51 (STMTS)

    VAR_DECL  go to state 70
    VAR       go to state 13
    TYPE      go to state 37
    STMTS     go to state 71


state 68

   37 PROTOTYPE: _void _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 72


state 69

   36 PROTOTYPE: TYPE _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 73


state 70

    9 VAR_DECLS: VAR_DECLS VAR_DECL .

    $default  reduce using rule 9 (VAR_DECLS)


state 71

   50 STMTS: STMTS . STMT
   59 STMT_BLOCK: _leftbrace VAR_DECLS STMTS . _rightbrace

    _leftparen        shift, and go to state 74
    _leftbrace        shift, and go to state 57
    _rightbrace       shift, and go to state 75
    _id               shift, and go to state 76
    _if               shift, and go to state 77
    _break            shift, and go to state 78
    _for              shift, and go to state 79
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _println          shift, and go to state 82
    _readln           shift, and go to state 83
    _return           shift, and go to state 84
    _while            shift, and go to state 85
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE     go to state 92
    STMT         go to state 93
    IF_STMT      go to state 94
    WHILE_STMT   go to state 95
    FOR_STMT     go to state 96
    BREAK_STMT   go to state 97
    RETURN_STMT  go to state 98
    PRINT_STMT   go to state 99
    STMT_BLOCK   go to state 100
    EXPR         go to state 101
    LVALUE       go to state 102
    CALL         go to state 103
    CONSTANT     go to state 104


state 72

   37 PROTOTYPE: _void _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 105


state 73

   36 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 106


state 74

   64 EXPR: _leftparen . EXPR _rightparen

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 107
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 75

   59 STMT_BLOCK: _leftbrace VAR_DECLS STMTS _rightbrace .

    $default  reduce using rule 59 (STMT_BLOCK)


state 76

   85 LVALUE: _id .
   89 CALL: _id . _leftparen ACTUALS _rightparen
   90     | _id . PRODPERIODID _leftparen ACTUALS _rightparen

    _leftparen  shift, and go to state 108
    _period     shift, and go to state 109

    $default  reduce using rule 85 (LVALUE)

    PRODPERIODID  go to state 110


state 77

   52 IF_STMT: _if . _leftparen EXPR _rightparen STMT IF_ONLY
   53        | _if . _leftparen EXPR _rightparen STMT _else STMT

    _leftparen  shift, and go to state 111


state 78

   56 BREAK_STMT: _break . _semicolon

    _semicolon  shift, and go to state 112


state 79

   55 FOR_STMT: _for . _leftparen EXPR_ONE _semicolon EXPR _semicolon EXPR_ONE _rightparen STMT

    _leftparen  shift, and go to state 113


state 80

   81 EXPR: _new . _leftparen _id _rightparen

    _leftparen  shift, and go to state 114


state 81

   82 EXPR: _newarray . _leftparen _intconstant _comma TYPE _rightparen

    _leftparen  shift, and go to state 115


state 82

   58 PRINT_STMT: _println . _leftparen EXPRS _rightparen _semicolon

    _leftparen  shift, and go to state 116


state 83

   80 EXPR: _readln . "()"

    "()"  shift, and go to state 117


state 84

   57 RETURN_STMT: _return . EXPR_ONE _semicolon

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE  go to state 118
    EXPR      go to state 101
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 85

   54 WHILE_STMT: _while . _leftparen EXPR _rightparen STMT

    _leftparen  shift, and go to state 119


state 86

   94 CONSTANT: _intconstant .

    $default  reduce using rule 94 (CONSTANT)


state 87

   95 CONSTANT: _doubleconstant .

    $default  reduce using rule 95 (CONSTANT)


state 88

   96 CONSTANT: _stringconstant .

    $default  reduce using rule 96 (CONSTANT)


state 89

   97 CONSTANT: _booleanconstant .

    $default  reduce using rule 97 (CONSTANT)


state 90

   70 EXPR: _minus . EXPR _multiplication

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 120
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 91

   79 EXPR: _not . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 121
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 92

   42 STMT: EXPR_ONE . _semicolon

    _semicolon  shift, and go to state 122


state 93

   50 STMTS: STMTS STMT .

    $default  reduce using rule 50 (STMTS)


state 94

   43 STMT: IF_STMT .

    $default  reduce using rule 43 (STMT)


state 95

   44 STMT: WHILE_STMT .

    $default  reduce using rule 44 (STMT)


state 96

   45 STMT: FOR_STMT .

    $default  reduce using rule 45 (STMT)


state 97

   46 STMT: BREAK_STMT .

    $default  reduce using rule 46 (STMT)


state 98

   47 STMT: RETURN_STMT .

    $default  reduce using rule 47 (STMT)


state 99

   48 STMT: PRINT_STMT .

    $default  reduce using rule 48 (STMT)


state 100

   49 STMT: STMT_BLOCK .

    $default  reduce using rule 49 (STMT)


state 101

   40 EXPR_ONE: EXPR .
   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135

    $default  reduce using rule 40 (EXPR_ONE)


state 102

   60 EXPR: LVALUE . _assignop EXPR
   62     | LVALUE .
   86 LVALUE: LVALUE . LVALUE_EXPR

    _leftbracket  shift, and go to state 136
    _assignop     shift, and go to state 137

    $default  reduce using rule 62 (EXPR)

    LVALUE_EXPR  go to state 138


state 103

   63 EXPR: CALL .

    $default  reduce using rule 63 (EXPR)


state 104

   61 EXPR: CONSTANT .

    $default  reduce using rule 61 (EXPR)


state 105

   37 PROTOTYPE: _void _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 37 (PROTOTYPE)


state 106

   36 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 36 (PROTOTYPE)


state 107

   64 EXPR: _leftparen EXPR . _rightparen
   65     | EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    _rightparen      shift, and go to state 139
    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135


state 108

   89 CALL: _id _leftparen . ACTUALS _rightparen

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 93 (ACTUALS)

    EXPR      go to state 140
    EXPRS     go to state 141
    LVALUE    go to state 102
    CALL      go to state 103
    ACTUALS   go to state 142
    CONSTANT  go to state 104


state 109

   91 PRODPERIODID: _period . _id

    _id  shift, and go to state 143


state 110

   90 CALL: _id PRODPERIODID . _leftparen ACTUALS _rightparen

    _leftparen  shift, and go to state 144


state 111

   52 IF_STMT: _if _leftparen . EXPR _rightparen STMT IF_ONLY
   53        | _if _leftparen . EXPR _rightparen STMT _else STMT

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 145
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 112

   56 BREAK_STMT: _break _semicolon .

    $default  reduce using rule 56 (BREAK_STMT)


state 113

   55 FOR_STMT: _for _leftparen . EXPR_ONE _semicolon EXPR _semicolon EXPR_ONE _rightparen STMT

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE  go to state 146
    EXPR      go to state 101
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 114

   81 EXPR: _new _leftparen . _id _rightparen

    _id  shift, and go to state 147


state 115

   82 EXPR: _newarray _leftparen . _intconstant _comma TYPE _rightparen

    _intconstant  shift, and go to state 148


state 116

   58 PRINT_STMT: _println _leftparen . EXPRS _rightparen _semicolon

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 140
    EXPRS     go to state 149
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 117

   80 EXPR: _readln "()" .

    $default  reduce using rule 80 (EXPR)


state 118

   57 RETURN_STMT: _return EXPR_ONE . _semicolon

    _semicolon  shift, and go to state 150


state 119

   54 WHILE_STMT: _while _leftparen . EXPR _rightparen STMT

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 151
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 120

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   70     | _minus EXPR . _multiplication
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 152
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135


state 121

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR
   79     | _not EXPR .

    $default  reduce using rule 79 (EXPR)


state 122

   42 STMT: EXPR_ONE _semicolon .

    $default  reduce using rule 42 (STMT)


state 123

   69 EXPR: EXPR _mod . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 153
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 124

   68 EXPR: EXPR _division . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 154
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 125

   67 EXPR: EXPR _multiplication . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 155
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 126

   66 EXPR: EXPR _minus . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 156
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 127

   65 EXPR: EXPR _plus . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 157
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 128

   74 EXPR: EXPR _greaterequal . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 158
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 129

   73 EXPR: EXPR _greater . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 159
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 130

   72 EXPR: EXPR _lessequal . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 160
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 131

   71 EXPR: EXPR _less . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 161
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 132

   76 EXPR: EXPR _notequal . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 162
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 133

   75 EXPR: EXPR _equal . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 163
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 134

   77 EXPR: EXPR _and . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 164
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 135

   78 EXPR: EXPR _or . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 165
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 136

   87 LVALUE_EXPR: _leftbracket . EXPR _rightbracket

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 166
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 137

   60 EXPR: LVALUE _assignop . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 167
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 138

   86 LVALUE: LVALUE LVALUE_EXPR .
   88 LVALUE_EXPR: LVALUE_EXPR . PRODPERIODID

    _period  shift, and go to state 109

    $default  reduce using rule 86 (LVALUE)

    PRODPERIODID  go to state 168


state 139

   64 EXPR: _leftparen EXPR _rightparen .

    $default  reduce using rule 64 (EXPR)


state 140

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR
   83 EXPRS: EXPR .

    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135

    $default  reduce using rule 83 (EXPRS)


state 141

   84 EXPRS: EXPRS . _comma EXPR
   92 ACTUALS: EXPRS .

    _comma  shift, and go to state 169

    $default  reduce using rule 92 (ACTUALS)


state 142

   89 CALL: _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 170


state 143

   91 PRODPERIODID: _period _id .

    $default  reduce using rule 91 (PRODPERIODID)


state 144

   90 CALL: _id PRODPERIODID _leftparen . ACTUALS _rightparen

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 93 (ACTUALS)

    EXPR      go to state 140
    EXPRS     go to state 141
    LVALUE    go to state 102
    CALL      go to state 103
    ACTUALS   go to state 171
    CONSTANT  go to state 104


state 145

   52 IF_STMT: _if _leftparen EXPR . _rightparen STMT IF_ONLY
   53        | _if _leftparen EXPR . _rightparen STMT _else STMT
   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    _rightparen      shift, and go to state 172
    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135


state 146

   55 FOR_STMT: _for _leftparen EXPR_ONE . _semicolon EXPR _semicolon EXPR_ONE _rightparen STMT

    _semicolon  shift, and go to state 173


state 147

   81 EXPR: _new _leftparen _id . _rightparen

    _rightparen  shift, and go to state 174


state 148

   82 EXPR: _newarray _leftparen _intconstant . _comma TYPE _rightparen

    _comma  shift, and go to state 175


state 149

   58 PRINT_STMT: _println _leftparen EXPRS . _rightparen _semicolon
   84 EXPRS: EXPRS . _comma EXPR

    _rightparen  shift, and go to state 176
    _comma       shift, and go to state 169


state 150

   57 RETURN_STMT: _return EXPR_ONE _semicolon .

    $default  reduce using rule 57 (RETURN_STMT)


state 151

   54 WHILE_STMT: _while _leftparen EXPR . _rightparen STMT
   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    _rightparen      shift, and go to state 177
    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135


state 152

   67 EXPR: EXPR _multiplication . EXPR
   70     | _minus EXPR _multiplication .

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _not              shift, and go to state 91

    $default  reduce using rule 70 (EXPR)

    EXPR      go to state 155
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 153

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   69     | EXPR _mod EXPR .
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 69 (EXPR)


state 154

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   68     | EXPR _division EXPR .
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 68 (EXPR)


state 155

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   67     | EXPR _multiplication EXPR .
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 67 (EXPR)


state 156

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   66     | EXPR _minus EXPR .
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 66 (EXPR)


state 157

   65 EXPR: EXPR . _plus EXPR
   65     | EXPR _plus EXPR .
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 65 (EXPR)


state 158

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   74     | EXPR _greaterequal EXPR .
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 74 (EXPR)


state 159

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   73     | EXPR _greater EXPR .
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 73 (EXPR)


state 160

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   72     | EXPR _lessequal EXPR .
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 72 (EXPR)


state 161

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   71     | EXPR _less EXPR .
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 71 (EXPR)


state 162

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   76     | EXPR _notequal EXPR .
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 76 (EXPR)


state 163

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   75     | EXPR _equal EXPR .
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 75 (EXPR)


state 164

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   77     | EXPR _and EXPR .
   78     | EXPR . _or EXPR

    $default  reduce using rule 77 (EXPR)


state 165

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR
   78     | EXPR _or EXPR .

    $default  reduce using rule 78 (EXPR)


state 166

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR
   87 LVALUE_EXPR: _leftbracket EXPR . _rightbracket

    _rightbracket    shift, and go to state 178
    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135


state 167

   60 EXPR: LVALUE _assignop EXPR .
   65     | EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    $default  reduce using rule 60 (EXPR)


state 168

   88 LVALUE_EXPR: LVALUE_EXPR PRODPERIODID .

    $default  reduce using rule 88 (LVALUE_EXPR)


state 169

   84 EXPRS: EXPRS _comma . EXPR

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 179
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 170

   89 CALL: _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 89 (CALL)


state 171

   90 CALL: _id PRODPERIODID _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 180


state 172

   52 IF_STMT: _if _leftparen EXPR _rightparen . STMT IF_ONLY
   53        | _if _leftparen EXPR _rightparen . STMT _else STMT

    _leftparen        shift, and go to state 74
    _leftbrace        shift, and go to state 57
    _id               shift, and go to state 76
    _if               shift, and go to state 77
    _break            shift, and go to state 78
    _for              shift, and go to state 79
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _println          shift, and go to state 82
    _readln           shift, and go to state 83
    _return           shift, and go to state 84
    _while            shift, and go to state 85
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE     go to state 92
    STMT         go to state 181
    IF_STMT      go to state 94
    WHILE_STMT   go to state 95
    FOR_STMT     go to state 96
    BREAK_STMT   go to state 97
    RETURN_STMT  go to state 98
    PRINT_STMT   go to state 99
    STMT_BLOCK   go to state 100
    EXPR         go to state 101
    LVALUE       go to state 102
    CALL         go to state 103
    CONSTANT     go to state 104


state 173

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon . EXPR _semicolon EXPR_ONE _rightparen STMT

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    EXPR      go to state 182
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 174

   81 EXPR: _new _leftparen _id _rightparen .

    $default  reduce using rule 81 (EXPR)


state 175

   82 EXPR: _newarray _leftparen _intconstant _comma . TYPE _rightparen

    _boolean  shift, and go to state 1
    _double   shift, and go to state 2
    _int      shift, and go to state 3
    _string   shift, and go to state 4
    _id       shift, and go to state 8

    TYPE  go to state 183


state 176

   58 PRINT_STMT: _println _leftparen EXPRS _rightparen . _semicolon

    _semicolon  shift, and go to state 184


state 177

   54 WHILE_STMT: _while _leftparen EXPR _rightparen . STMT

    _leftparen        shift, and go to state 74
    _leftbrace        shift, and go to state 57
    _id               shift, and go to state 76
    _if               shift, and go to state 77
    _break            shift, and go to state 78
    _for              shift, and go to state 79
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _println          shift, and go to state 82
    _readln           shift, and go to state 83
    _return           shift, and go to state 84
    _while            shift, and go to state 85
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE     go to state 92
    STMT         go to state 185
    IF_STMT      go to state 94
    WHILE_STMT   go to state 95
    FOR_STMT     go to state 96
    BREAK_STMT   go to state 97
    RETURN_STMT  go to state 98
    PRINT_STMT   go to state 99
    STMT_BLOCK   go to state 100
    EXPR         go to state 101
    LVALUE       go to state 102
    CALL         go to state 103
    CONSTANT     go to state 104


state 178

   87 LVALUE_EXPR: _leftbracket EXPR _rightbracket .

    $default  reduce using rule 87 (LVALUE_EXPR)


state 179

   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR
   84 EXPRS: EXPRS _comma EXPR .

    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135

    $default  reduce using rule 84 (EXPRS)


state 180

   90 CALL: _id PRODPERIODID _leftparen ACTUALS _rightparen .

    $default  reduce using rule 90 (CALL)


state 181

   52 IF_STMT: _if _leftparen EXPR _rightparen STMT . IF_ONLY
   53        | _if _leftparen EXPR _rightparen STMT . _else STMT

    _else    shift, and go to state 186
    IF_ONLY  shift, and go to state 187


state 182

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon EXPR . _semicolon EXPR_ONE _rightparen STMT
   65 EXPR: EXPR . _plus EXPR
   66     | EXPR . _minus EXPR
   67     | EXPR . _multiplication EXPR
   68     | EXPR . _division EXPR
   69     | EXPR . _mod EXPR
   71     | EXPR . _less EXPR
   72     | EXPR . _lessequal EXPR
   73     | EXPR . _greater EXPR
   74     | EXPR . _greaterequal EXPR
   75     | EXPR . _equal EXPR
   76     | EXPR . _notequal EXPR
   77     | EXPR . _and EXPR
   78     | EXPR . _or EXPR

    _semicolon       shift, and go to state 188
    _mod             shift, and go to state 123
    _division        shift, and go to state 124
    _multiplication  shift, and go to state 125
    _minus           shift, and go to state 126
    _plus            shift, and go to state 127
    _greaterequal    shift, and go to state 128
    _greater         shift, and go to state 129
    _lessequal       shift, and go to state 130
    _less            shift, and go to state 131
    _notequal        shift, and go to state 132
    _equal           shift, and go to state 133
    _and             shift, and go to state 134
    _or              shift, and go to state 135


state 183

   16 TYPE: TYPE . _leftbracket _rightbracket
   82 EXPR: _newarray _leftparen _intconstant _comma TYPE . _rightparen

    _rightparen   shift, and go to state 189
    _leftbracket  shift, and go to state 24


state 184

   58 PRINT_STMT: _println _leftparen EXPRS _rightparen _semicolon .

    $default  reduce using rule 58 (PRINT_STMT)


state 185

   54 WHILE_STMT: _while _leftparen EXPR _rightparen STMT .

    $default  reduce using rule 54 (WHILE_STMT)


state 186

   53 IF_STMT: _if _leftparen EXPR _rightparen STMT _else . STMT

    _leftparen        shift, and go to state 74
    _leftbrace        shift, and go to state 57
    _id               shift, and go to state 76
    _if               shift, and go to state 77
    _break            shift, and go to state 78
    _for              shift, and go to state 79
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _println          shift, and go to state 82
    _readln           shift, and go to state 83
    _return           shift, and go to state 84
    _while            shift, and go to state 85
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE     go to state 92
    STMT         go to state 190
    IF_STMT      go to state 94
    WHILE_STMT   go to state 95
    FOR_STMT     go to state 96
    BREAK_STMT   go to state 97
    RETURN_STMT  go to state 98
    PRINT_STMT   go to state 99
    STMT_BLOCK   go to state 100
    EXPR         go to state 101
    LVALUE       go to state 102
    CALL         go to state 103
    CONSTANT     go to state 104


state 187

   52 IF_STMT: _if _leftparen EXPR _rightparen STMT IF_ONLY .

    $default  reduce using rule 52 (IF_STMT)


state 188

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon EXPR _semicolon . EXPR_ONE _rightparen STMT

    _leftparen        shift, and go to state 74
    _id               shift, and go to state 76
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _readln           shift, and go to state 83
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE  go to state 191
    EXPR      go to state 101
    LVALUE    go to state 102
    CALL      go to state 103
    CONSTANT  go to state 104


state 189

   82 EXPR: _newarray _leftparen _intconstant _comma TYPE _rightparen .

    $default  reduce using rule 82 (EXPR)


state 190

   53 IF_STMT: _if _leftparen EXPR _rightparen STMT _else STMT .

    $default  reduce using rule 53 (IF_STMT)


state 191

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon EXPR _semicolon EXPR_ONE . _rightparen STMT

    _rightparen  shift, and go to state 192


state 192

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon EXPR _semicolon EXPR_ONE _rightparen . STMT

    _leftparen        shift, and go to state 74
    _leftbrace        shift, and go to state 57
    _id               shift, and go to state 76
    _if               shift, and go to state 77
    _break            shift, and go to state 78
    _for              shift, and go to state 79
    _new              shift, and go to state 80
    _newarray         shift, and go to state 81
    _println          shift, and go to state 82
    _readln           shift, and go to state 83
    _return           shift, and go to state 84
    _while            shift, and go to state 85
    _intconstant      shift, and go to state 86
    _doubleconstant   shift, and go to state 87
    _stringconstant   shift, and go to state 88
    _booleanconstant  shift, and go to state 89
    _minus            shift, and go to state 90
    _not              shift, and go to state 91

    $default  reduce using rule 41 (EXPR_ONE)

    EXPR_ONE     go to state 92
    STMT         go to state 193
    IF_STMT      go to state 94
    WHILE_STMT   go to state 95
    FOR_STMT     go to state 96
    BREAK_STMT   go to state 97
    RETURN_STMT  go to state 98
    PRINT_STMT   go to state 99
    STMT_BLOCK   go to state 100
    EXPR         go to state 101
    LVALUE       go to state 102
    CALL         go to state 103
    CONSTANT     go to state 104


state 193

   55 FOR_STMT: _for _leftparen EXPR_ONE _semicolon EXPR _semicolon EXPR_ONE _rightparen STMT .

    $default  reduce using rule 55 (FOR_STMT)
